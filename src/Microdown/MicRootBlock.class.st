"
I am the root of the github markup tree
"
Class {
	#name : 'MicRootBlock',
	#superclass : 'MicAbstractBlock',
	#category : 'Microdown-Model',
	#package : 'Microdown',
	#tag : 'Model'
}

{ #category : 'visiting' }
MicRootBlock >> accept: aVisitor [
 	^ aVisitor visitRoot: self
]

{ #category : 'testing' }
MicRootBlock >> addLineAndReturnNextNode: line [
	"add line to this node. 
	Notice, the action is allowed to create new nodes in the block tree.
	Returns the node to handle next line - typically self."

	| newBlock |
	newBlock := self newBlockFor: line parent: self.
	^ newBlock 
]

{ #category : 'testing' }
MicRootBlock >> canConsumeLine: line [
	"The root block can always consume everything no matter what it is."

	^ true
]

{ #category : 'accessing' }
MicRootBlock >> fromFile [ " retieve "
	^ self propertyAt: #file 
]

{ #category : 'accessing' }
MicRootBlock >> fromFile: aFile [ " put file object in the root"
	self propertyAt: #file put: aFile .  
]

{ #category : 'accessing' }
MicRootBlock >> indent [
	^0
]

{ #category : 'accessing' }
MicRootBlock >> properties: aConfigurationForPillar [
	"Pay attention the strong hypothesis here is that keys of microdown properties and pillar configuration should not overlap. A possible solution would be to have clever at: and at:put: that check for example for a prefix for microdown properties.
	
	This way the user would write
		aMicElement at: #prop
		aMicElement at: #prop put: 123
				
		the system would store: #mic_prop
	
	"

	"to avoid trashing the potential existing properties of a mic element, 
	we copied them into the configuration which is a special kind of dictionary and 
	store the dictionary values in it.
	"
	
	properties keysAndValuesDo: [ :k :v | aConfigurationForPillar at: k put: v ].
	properties := aConfigurationForPillar
]
